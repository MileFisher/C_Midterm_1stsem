#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <ctype.h>

// Function to convert string to lowercase
char *strlower(char *s) {
    for(int i = 0; s[i]; i++){
        s[i] = tolower(s[i]);
    }
    return s;
}

// Function for operations with two parameters
double two_param_operation(char *operation, double num1, double num2) {
    if (strcasecmp(operation, "+") == 0) {
        return num1 + num2;
    } else if (strcasecmp(operation, "-") == 0) {
        return num1 - num2;
    } else if (strcasecmp(operation, "*") == 0) {
        return num1 * num2;
    } else if (strcasecmp(operation, "/") == 0) {
        if (num2 == 0) {
            return NAN;  // Return NaN if division by zero
        }
        return num1 / num2;
    } else if (strcasecmp(operation, "**") == 0) {
        return pow(num1, num2);
    } else if (strcasecmp(operation, "%") == 0) {
        return fmod( num1,  num2);
    } else {
        return NAN;  // Return NaN for invalid operation
    }
}

// Function for 'avg' operation
double avg_operation(double numbers[], int count) {
    double sum = 0;
    for (int i = 0; i < count; i++) {
        sum += numbers[i];
    }
    return sum / count;
}

// Function for 'min' operation
double min_operation(double numbers[], int count) {
    double min = numbers[0];
    for (int i = 1; i < count; i++) {
        if (numbers[i] < min) {
            min = numbers[i];
        }
    }
    return min;
}

// Function for 'max' operation
double max_operation(double numbers[], int count) {
    double max = numbers[0];
    for (int i = 1; i < count; i++) {
        if (numbers[i] > max) {
            max = numbers[i];
        }
    }
    return max;
}

// Function for 'sum odd' operation
double sum_odd(int n) {
    if (n <= 0) {
        return NAN;  // Return NaN for invalid input
    }
    int sum = 0;
    for (int i = 1; i <= n; i += 2) {
        sum += i;
    }
    return sum;
}

// Function for 'sum even' operation
double sum_even(int n) {
    if (n <= 0) {
        return NAN;  // Return NaN for invalid input
    }
    int sum = 0;
    for (int i = 2; i <= n; i += 2) {
        sum += i;
    }
    return sum;
}

// Function to check if a number is prime
int is_prime(int num) {
    if (num <= 1) return 0;
    if (num % 2 == 0 && num > 2) return 0;
    for(int i = 3; i <= sqrt(num); i+= 2) {
        if (num % i == 0)
            return 0;
    }
    return 1;
}

// Function for 'count' operation
int count_primes(double numbers[], int count) {
    int prime_count = 0;
    for (int i = 0; i < count; i++) {
        if (is_prime((int)numbers[i])) {
            prime_count++;
        }
    }
    return prime_count;
}

// Function for 'dec2bin' operation
char* dec2bin_operation(int n) {
    if (n <= 0) {
        return "error";  // Return error for invalid input
    }
    char* binary = malloc(32 + 1);
    binary[32] = '\0';
    for (int i = 31; i >= 0; --i, n >>= 1) {
        binary[i] = (n & 1) + '0';
    }
    return binary;
}

// Function for 'map double' operation
void map_double_operation(double numbers[], int count) {
    for (int i = 0; i < count; i++) {
        numbers[i] *= 2;
    }
}

// Function for 'map square' operation
void map_square_operation(double numbers[], int count) {
    for (int i = 0; i < count; i++) {
        numbers[i] *= numbers[i];
    }
}

// Function for 'map absolute' operation
void map_absolute_operation(double numbers[], int count) {
    for (int i = 0; i < count; i++) {
        numbers[i] = fabs(numbers[i]);
    }
}

int hasExtraSpaces(const char* line) {
    int i;
    int spaceCount = 0;
    int errorOccurred = 0;

    for (i = 0; i < strlen(line); i++) {
        if (line[i] == ' ') {
            spaceCount++;
            if (line[i + 1] == ' ' || i == 0) {
                errorOccurred = 1;
                break;
            }
        }
    }

    return errorOccurred;
}

int main(){
    FILE *inputFile = fopen("inputTest2.txt", "r");
    FILE *outputFile = fopen("outputTest2.txt", "w");

    if (inputFile == NULL || outputFile == NULL) {
        printf("Error opening file\n");
        return 1;
    }

    char operation[20];
    double numbers[10], result;
    char line[256], temp[256];
    int is_dec2bin, is_map_double, is_map_square, is_map_absolute;  // Add this line to declare the flags

    while (fgets(line, sizeof(line), inputFile)) {

            // Check for extra spaces at the beginning or end of the line
        if (line[0] == ' ' || line[strlen(line) - 1] == ' ') {
            fprintf(outputFile, "error\n");
            continue;
        }

        // Trim leading and trailing spaces
        char* start = line;
        while (*start == ' ') start++;
        char* end = start + strlen(start) - 1;
        while (end > start && *end == ' ') end--;
        *(end + 1) = '\0';

        // If the line is empty after trimming, write an error and continue
        if (*start == '\0') {
            fprintf(outputFile, "error\n");
            continue;
        }

        // Check for extra spaces in the line
        if (hasExtraSpaces(line)) {
            fprintf(outputFile, "error\n");
            continue;
        }


        result = NAN;  // Initialize result to NAN at the start of each iteration
        is_dec2bin = 0;  // Initialize the flag to 0 at the start of each iteration
        is_map_double = 0;  // Initialize the flag to 0 at the start of each iteration
        is_map_square = 0;  // Initialize the flag to 0 at the start of each iteration
        is_map_absolute = 0;  // Initialize the flag to 0 at the start of each iteration
        int errorOccurred = 0;
        strcpy(temp, line); // copy line to temp
        char *token = strtok(temp, " "); // tokenize the line
        int count = 0; // count the number of tokens
        int spaceCount = 0; // count the number of spaces


        // Strip newline character
        size_t len = strlen(line);
        if (len > 0 && line[len - 1] == '\n') {
            line[len - 1] = '\0';
        }

        int errorFlag = 0;

        while (token != NULL) {
            if (count == 0) {
                char firstPart[20];
                strcpy(firstPart, token);
                strlower(firstPart);

                if (strstr(firstPart, " ") != NULL) {
                    errorFlag = 1;  // Set the flag to 1 if there is a space in the operator name
                    break;
                }

                if (strcmp(firstPart, "map") == 0) {
                    token = strtok(NULL, " ");
                    if (token == NULL) {
                        errorFlag = 1;  // Set the flag to 1 if there is no sub-operator or data after 'map'
                        break;
                    } else {
                        char secondPart[20];
                        strcpy(secondPart, token);
                        strlower(secondPart);

                        if (strcmp(secondPart, "double") == 0) {
                            strcpy(operation, "map double");
                        } else if (strcmp(secondPart, "square") == 0) {
                            strcpy(operation, "map square");
                        } else if (strcmp(secondPart, "absolute") == 0) {
                            strcpy(operation, "map absolute");
                        } else {
                            errorFlag = 1;  // Set the flag to 1 if 'map' is followed by an invalid sub-operator
                            break;
                        }
                    }
                } else {
                    strcpy(operation, firstPart);
                }
            } else if (count <= 10) {
                double num = atof(token);
                if (num < -100 || num > 100) {
                    if (!errorOccurred){
                        errorOccurred = 1;
                    }
                    break;
                }
                if(!errorOccurred){
                    numbers[count - 1] = num;
                }
            } else {
                break;
            }
            count++;
            token = strtok(NULL, " ");
        }

        if (count == 1) {
            errorFlag = 1;  // Set the flag to 1 if there is only an operator but no data
        }

        if (errorFlag) {
            fprintf(outputFile, "error\n");
            continue;
        }
        if (strcmp(operation, "+") == 0 || strcmp(operation, "-") == 0 || strcmp(operation, "*") == 0 || strcmp(operation, "/") == 0 || strcmp(operation, "**") == 0 || strcmp(operation, "%") == 0) {
            if (count != 3) {
                fprintf(outputFile, "error\n");
                continue;
            }
            result = two_param_operation(operation, numbers[0], numbers[1]);
        } else if (strcmp(operation, "avg") == 0) {
            if (count < 2 || count > 11 ) {
                fprintf(outputFile, "error\n");
                continue;
            }
            result = avg_operation(numbers, count - 1);
        } else if (strcmp(operation, "min") == 0) {
            if (count < 2 || count > 11) {
                fprintf(outputFile, "error\n");
                continue;
            }
            result = min_operation(numbers, count - 1);
        } else if (strcmp(operation, "max") == 0) {
            if (count < 2 || count > 11) {
                fprintf(outputFile, "error\n");
                continue;
            }
            result = max_operation(numbers, count - 1);
        } else if (strcmp(operation, "sum odd") == 0) {
            if (count != 2) {
                fprintf(outputFile, "error\n");
                continue;
            }
            result = sum_odd((int)numbers[0]);
        } else if (strcmp(operation, "sum even") == 0) {
            if (count != 2) {
                fprintf(outputFile, "error\n");
                continue;
            }
            result = sum_even((int)numbers[0]);
        } else if (strcmp(operation, "count") == 0) {
            if (count < 2 || count > 11) {
                fprintf(outputFile, "error\n");
                continue;
            }
            result = count_primes(numbers, count - 1);
        } else if (strcmp(operation, "dec2bin") == 0) {
            if (count != 2) {
                fprintf(outputFile, "error\n");
                continue;
            }
            is_dec2bin = 1;  // Set the flag to 1 if the operation is dec2bin
            char* result_bin = dec2bin_operation((int)numbers[0]);
            if (strcmp(result_bin, "error") == 0) {
                fprintf(outputFile, "error\n");
            } else {
                fprintf(outputFile, "%s\n", result_bin);
            }
            free(result_bin);
        } else if (strcmp(operation, "map double") == 0) {
            if (count < 2 || count > 11) {
                fprintf(outputFile, "error\n");
                continue;
            }
            is_map_double = 1;  // Set the flag to 1 if the operation is map double
            map_double_operation(numbers, count - 1);
            for (int i = 0; i < count - 1; i++) {
                fprintf(outputFile, "%.2lf ", numbers[i]);
            }
            fprintf(outputFile, "\n");
        } else if (strcmp(operation, "map square") == 0) {
            if (count < 2 || count > 11) {
                fprintf(outputFile, "error\n");
                continue;
            }
            is_map_square = 1;  // Set the flag to 1 if the operation is map square
            map_square_operation(numbers, count - 1);
            for (int i = 0; i < count - 1; i++) {
                fprintf(outputFile, "%.2lf ", numbers[i]);
            }
            fprintf(outputFile, "\n");
        } else if (strcmp(operation, "map absolute") == 0) {
            if (count < 2 || count > 11) {
                fprintf(outputFile, "error\n");
                continue;
            }
            is_map_absolute = 1;  // Set the flag to 1 if the operation is map absolute
            map_absolute_operation(numbers, count - 1);
            for (int i = 0; i < count - 1; i++) {
                fprintf(outputFile, "%.2lf ", numbers[i]);
            }
            fprintf(outputFile, "\n");
        } else {
            fprintf(outputFile, "error\n");
            continue;
        }


        if (errorOccurred) {
            fprintf(outputFile, "error\n");
        } else if (!is_dec2bin && !is_map_double && !is_map_square && !is_map_absolute) {
            if (isnan(result)) {
                fprintf(outputFile, "error\n");
            } else {
                fprintf(outputFile, "%.2lf\n", result);
            }
        }  else {
            fprintf(outputFile, "error\n");
            continue;
        }
    }
    fclose(inputFile);
    fclose(outputFile);

    return 0;
}
